{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandartoplek/Documents/jamb/jambapp/pages/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst data = {\n  userName: \"guest-\" + new Date().getDate()\n};\nconst apiBaseUrl = \"https://jamb.azurewebsites.net\";\n\nconst Index = () => {\n  const {\n    0: isReady,\n    1: setIsReady\n  } = useState(false);\n  const {\n    0: messages,\n    1: setMessages\n  } = useState(new Array());\n  const {\n    0: newMessageText,\n    1: setNewMessageText\n  } = useState('');\n\n  const sendMessageClick = () => {\n    sendMessage(data.userName, newMessageText);\n  };\n\n  function sendMessage(sender, messageText) {\n    return axios.post(`${apiBaseUrl}/api/messages`, {\n      sender: sender,\n      text: messageText\n    }).then(resp => resp.data);\n  }\n\n  let counter = 0;\n\n  function newMessage(message) {\n    message.id = counter++;\n    messages.unshift(message);\n    setMessages([...messages]);\n  }\n\n  useEffect(() => {\n    const connection = new window.signalR.HubConnectionBuilder().withUrl(`${apiBaseUrl}/api`).configureLogging(window.signalR.LogLevel.Information).build();\n    connection.on('newMessage', newMessage);\n    connection.onclose(() => console.log('disconnected'));\n    connection.start().then(() => setIsReady(true)).catch(err => {\n      console.error(err);\n      setIsReady(false);\n    });\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"JAMB\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, isReady ? \"Connected\" : \"Loading...\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    value: newMessageText,\n    onChange: e => setNewMessageText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    onClick: () => sendMessageClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Salji\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, messages.map(message => __jsx(\"div\", {\n    key: message.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"(\", message.sender, \") \", message.text))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/aleksandartoplek/Documents/jamb/jambapp/pages/index.jsx"],"names":["React","useEffect","useState","axios","data","userName","Date","getDate","apiBaseUrl","Index","isReady","setIsReady","messages","setMessages","Array","newMessageText","setNewMessageText","sendMessageClick","sendMessage","sender","messageText","post","text","then","resp","counter","newMessage","message","id","unshift","connection","window","signalR","HubConnectionBuilder","withUrl","configureLogging","LogLevel","Information","build","on","onclose","console","log","start","catch","err","error","e","target","value","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst data = {\n  userName: \"guest-\" + new Date().getDate(),\n};\n\nconst apiBaseUrl = \"https://jamb.azurewebsites.net\";\n\nconst Index = () => {\n  const [isReady, setIsReady] = useState(false);\n  const [messages, setMessages] = useState(new Array());\n  const [newMessageText, setNewMessageText] = useState('');\n\n  const sendMessageClick = () => {\n    sendMessage(data.userName, newMessageText);\n  };\n\n  function sendMessage(sender, messageText) {\n    return axios.post(`${apiBaseUrl}/api/messages`, {\n      sender: sender,\n      text: messageText\n    }).then(resp => resp.data);\n  }\n\n  let counter = 0;\n  function newMessage(message) {\n    message.id = counter++;\n    messages.unshift(message);\n    setMessages([...messages]);\n  }\n\n  useEffect(() => {\n    const connection = new window.signalR.HubConnectionBuilder()\n      .withUrl(`${apiBaseUrl}/api`)\n      .configureLogging(window.signalR.LogLevel.Information)\n      .build();\n\n    connection.on('newMessage', newMessage);\n    connection.onclose(() => console.log('disconnected'));\n\n    connection.start()\n      .then(() => setIsReady(true))\n      .catch((err) => {console.error(err); setIsReady(false);});\n  }, []);\n\n  return (\n    <div>\n      <h1>JAMB</h1>\n      <div>{isReady ? \"Connected\" : \"Loading...\"}</div>\n      <div>\n        <input value={newMessageText} onChange={(e) => setNewMessageText(e.target.value)} />\n        <button onClick={() => sendMessageClick()}>Salji</button>\n      </div>\n      <div>\n        {messages.map((message) => (\n          <div key={message.id}>({message.sender}) {message.text}</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}